{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API ProductType management Server by Fiber-Teletubbie's ProductType API.",
        "title": "ProductType API for Fiber-Test",
        "contact": {
            "name": "Walter White",
            "url": "https://twitter.com/example",
            "email": "example@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8081",
    "basePath": "/",
    "paths": {
        "/auths/": {
            "post": {
                "description": "Register user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "User data to be register",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Register User Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Error Conflict Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auths/login": {
            "post": {
                "description": "Login user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User data to be login",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login User Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.AuthPassportResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Error Conflict Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auths/logout/{id}": {
            "delete": {
                "description": "Logout user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "Logout User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Oauth ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout User Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Error Conflict Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auths/reflesh": {
            "post": {
                "description": "Refresh Token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "Refresh Token",
                "parameters": [
                    {
                        "description": "User data to be reflesh token",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reflesh Token Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.AuthPassportResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Error Conflict Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "Health check",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "healthcheck"
                ],
                "summary": "Health Check",
                "operationId": "HealthCheckHandler",
                "responses": {
                    "200": {
                        "description": "Welcome to ProductType Server",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    }
                }
            }
        },
        "/producttypes/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all producttype",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "producttypes"
                ],
                "summary": "Get All ProductType",
                "responses": {
                    "200": {
                        "description": "Get ProductTypes Successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ProductTypesResponse"
                            }
                        }
                    },
                    "404": {
                        "description": "Error Not Found",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create producttype",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "producttypes"
                ],
                "summary": "Create ProductType",
                "parameters": [
                    {
                        "description": "ProductType data to be create",
                        "name": "ProductType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProductTypeCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create ProductType Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Error Conflict Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/producttypes/count": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get producttype's count from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "producttypes"
                ],
                "summary": "Get ProductType Count",
                "responses": {
                    "200": {
                        "description": "Get ProductType'Count Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.CountResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/producttypes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get producttype by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "producttypes"
                ],
                "summary": "Get ProductType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ProductType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get ProductType Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.ProductTypeResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error Not Found",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update producttype by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "producttypes"
                ],
                "summary": "Update ProductType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ProductType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ProductType data to be update",
                        "name": "ProductType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProductTypeUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update ProductType Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error Not Found",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete producttype by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "producttypes"
                ],
                "summary": "Delete ProductType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ProductType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete ProductType Successfully",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Error Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error Not Found",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Unexpected Error",
                        "schema": {
                            "$ref": "#/definitions/errs.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errs.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.AuthPassportResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "$ref": "#/definitions/model.UserPassport"
                }
            }
        },
        "model.CountResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "integer"
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "user_email",
                "user_password"
            ],
            "properties": {
                "user_email": {
                    "type": "string",
                    "maxLength": 40
                },
                "user_password": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "model.ProductType": {
            "type": "object",
            "properties": {
                "prodtype_id": {
                    "type": "integer"
                },
                "prodtype_name": {
                    "type": "string"
                }
            }
        },
        "model.ProductTypeCreate": {
            "type": "object",
            "required": [
                "prodtype_id",
                "prodtype_name"
            ],
            "properties": {
                "prodtype_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "prodtype_name": {
                    "type": "string",
                    "maxLength": 40
                }
            }
        },
        "model.ProductTypeResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "$ref": "#/definitions/model.ProductType"
                }
            }
        },
        "model.ProductTypeUpdate": {
            "type": "object",
            "required": [
                "prodtype_name"
            ],
            "properties": {
                "prodtype_name": {
                    "type": "string",
                    "maxLength": 40
                }
            }
        },
        "model.ProductTypesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProductType"
                    }
                }
            }
        },
        "model.RefreshToken": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "model.StringResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.UserCreate": {
            "type": "object",
            "required": [
                "role_id",
                "user_email",
                "user_id",
                "user_name",
                "user_password"
            ],
            "properties": {
                "role_id": {
                    "type": "integer"
                },
                "user_email": {
                    "type": "string",
                    "maxLength": 50
                },
                "user_id": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 40
                },
                "user_password": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "model.UserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roleID": {
                    "type": "integer"
                }
            }
        },
        "model.UserPassport": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/model.UserToken"
                },
                "user": {
                    "$ref": "#/definitions/model.UserDTO"
                }
            }
        },
        "model.UserToken": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "oauth_id": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"Type 'Bearer' followed by a space and your JWT token.\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}