basePath: /
definitions:
  errs.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.CountResponse:
    properties:
      code:
        type: integer
      message:
        type: integer
    type: object
  model.ProductType:
    properties:
      ProdType_ID:
        type: integer
      ProdType_Name:
        type: string
    type: object
  model.ProductTypeCreate:
    properties:
      ProdType_ID:
        minimum: 0
        type: integer
      ProdType_Name:
        maxLength: 40
        type: string
    required:
    - ProdType_ID
    - ProdType_Name
    type: object
  model.ProductTypeResponse:
    properties:
      code:
        type: integer
      message:
        $ref: '#/definitions/model.ProductType'
    type: object
  model.ProductTypeUpdate:
    properties:
      ProdType_Name:
        maxLength: 40
        type: string
    required:
    - ProdType_Name
    type: object
  model.ProductTypesResponse:
    properties:
      code:
        type: integer
      message:
        items:
          $ref: '#/definitions/model.ProductType'
        type: array
    type: object
  model.StringResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: example@gmail.com
    name: Walter White
    url: https://twitter.com/example
  description: API ProductType management Server by Fiber- Teletubbie's ProductType
    API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: ProductType API for For Fiber-Test
  version: "1.0"
paths:
  /healthcheck:
    get:
      description: Health check
      operationId: HealthCheckHandler
      produces:
      - application/json
      responses:
        "200":
          description: Welcome to ProductType Server
          schema:
            $ref: '#/definitions/model.StringResponse'
      summary: Health Check
      tags:
      - healthcheck
  /producttype/:
    get:
      description: Get all producttype
      produces:
      - application/json
      responses:
        "200":
          description: Get ProductTypes Successfully
          schema:
            items:
              $ref: '#/definitions/model.ProductTypesResponse'
            type: array
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get All ProductType
      tags:
      - producttype
    post:
      description: Create producttype
      parameters:
      - description: ProductType data to be create
        in: body
        name: ProductType
        required: true
        schema:
          $ref: '#/definitions/model.ProductTypeCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Create ProductType Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "409":
          description: Error Conflict Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Create ProductType
      tags:
      - producttype
  /producttype/{id}:
    delete:
      description: Delete producttype by id
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delete ProductType Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Delete ProductType
      tags:
      - producttype
    get:
      description: Get producttype by id
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get ProductType Successfully
          schema:
            $ref: '#/definitions/model.ProductTypeResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get ProductType
      tags:
      - producttype
    put:
      description: Update producttype by id
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      - description: ProductType data to be update
        in: body
        name: ProductType
        required: true
        schema:
          $ref: '#/definitions/model.ProductTypeUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Update ProductType Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Update ProductType
      tags:
      - producttype
  /producttype/count:
    get:
      description: Get producttype's count from database
      produces:
      - application/json
      responses:
        "200":
          description: Get ProductType'Count Successfully
          schema:
            $ref: '#/definitions/model.CountResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get ProductType Count
      tags:
      - producttype
schemes:
- http
- https
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
