basePath: /
definitions:
  errs.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.AuthPassportResponse:
    properties:
      code:
        type: integer
      message:
        $ref: '#/definitions/model.UserPassport'
    type: object
  model.CountResponse:
    properties:
      code:
        type: integer
      message:
        type: integer
    type: object
  model.LoginRequest:
    properties:
      user_email:
        maxLength: 40
        type: string
      user_password:
        maxLength: 255
        type: string
    required:
    - user_email
    - user_password
    type: object
  model.ProductType:
    properties:
      prodtype_id:
        type: integer
      prodtype_name:
        type: string
    type: object
  model.ProductTypeCreate:
    properties:
      prodtype_id:
        minimum: 0
        type: integer
      prodtype_name:
        maxLength: 40
        type: string
    required:
    - prodtype_id
    - prodtype_name
    type: object
  model.ProductTypeResponse:
    properties:
      code:
        type: integer
      message:
        $ref: '#/definitions/model.ProductType'
    type: object
  model.ProductTypeUpdate:
    properties:
      prodtype_name:
        maxLength: 40
        type: string
    required:
    - prodtype_name
    type: object
  model.ProductTypesResponse:
    properties:
      code:
        type: integer
      message:
        items:
          $ref: '#/definitions/model.ProductType'
        type: array
    type: object
  model.RefreshToken:
    properties:
      refresh_token:
        type: string
    type: object
  model.StringResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.UserCreate:
    properties:
      role_id:
        type: integer
      user_email:
        maxLength: 50
        type: string
      user_id:
        type: integer
      user_name:
        maxLength: 40
        type: string
      user_password:
        maxLength: 255
        type: string
    required:
    - role_id
    - user_email
    - user_id
    - user_name
    - user_password
    type: object
  model.UserDTO:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      roleID:
        type: integer
    type: object
  model.UserPassport:
    properties:
      token:
        $ref: '#/definitions/model.UserToken'
      user:
        $ref: '#/definitions/model.UserDTO'
    type: object
  model.UserToken:
    properties:
      access_token:
        type: string
      oauth_id:
        type: integer
      refresh_token:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: example@gmail.com
    name: Walter White
    url: https://twitter.com/example
  description: API ProductType management Server by Fiber-Teletubbie's ProductType
    API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: ProductType API for Fiber-Test
  version: "1.0"
paths:
  /auths/:
    post:
      description: Register user
      parameters:
      - description: User data to be register
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Register User Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "409":
          description: Error Conflict Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Register User
      tags:
      - auths
  /auths/login:
    post:
      description: Login user
      parameters:
      - description: User data to be login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login User Successfully
          schema:
            $ref: '#/definitions/model.AuthPassportResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "409":
          description: Error Conflict Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Login User
      tags:
      - auths
  /auths/logout/{id}:
    delete:
      description: Logout user
      parameters:
      - description: Oauth ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Logout User Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "409":
          description: Error Conflict Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Logout User
      tags:
      - auths
  /auths/reflesh:
    post:
      description: Refresh Token
      parameters:
      - description: User data to be reflesh token
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: Reflesh Token Successfully
          schema:
            $ref: '#/definitions/model.AuthPassportResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "409":
          description: Error Conflict Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Refresh Token
      tags:
      - auths
  /healthcheck:
    get:
      description: Health check
      operationId: HealthCheckHandler
      produces:
      - application/json
      responses:
        "200":
          description: Welcome to ProductType Server
          schema:
            $ref: '#/definitions/model.StringResponse'
      summary: Health Check
      tags:
      - healthcheck
  /producttypes/:
    get:
      description: Get all producttype
      produces:
      - application/json
      responses:
        "200":
          description: Get ProductTypes Successfully
          schema:
            items:
              $ref: '#/definitions/model.ProductTypesResponse'
            type: array
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All ProductType
      tags:
      - producttypes
    post:
      description: Create producttype
      parameters:
      - description: ProductType data to be create
        in: body
        name: ProductType
        required: true
        schema:
          $ref: '#/definitions/model.ProductTypeCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Create ProductType Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "409":
          description: Error Conflict Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create ProductType
      tags:
      - producttypes
  /producttypes/{id}:
    delete:
      description: Delete producttype by id
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delete ProductType Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete ProductType
      tags:
      - producttypes
    get:
      description: Get producttype by id
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get ProductType Successfully
          schema:
            $ref: '#/definitions/model.ProductTypeResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get ProductType
      tags:
      - producttypes
    put:
      description: Update producttype by id
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      - description: ProductType data to be update
        in: body
        name: ProductType
        required: true
        schema:
          $ref: '#/definitions/model.ProductTypeUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Update ProductType Successfully
          schema:
            $ref: '#/definitions/model.StringResponse'
        "400":
          description: Error Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Error Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update ProductType
      tags:
      - producttypes
  /producttypes/count:
    get:
      description: Get producttype's count from database
      produces:
      - application/json
      responses:
        "200":
          description: Get ProductType'Count Successfully
          schema:
            $ref: '#/definitions/model.CountResponse'
        "500":
          description: Error Unexpected Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get ProductType Count
      tags:
      - producttypes
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: '"Type ''Bearer'' followed by a space and your JWT token."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
